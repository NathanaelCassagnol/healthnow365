import { BackboneElement, Coding, Element, Quantity, anyBasicType, canonical, code, date, dateTime, decimal, id, instant, integer, markdown, positiveInt, time, unsignedInt, uri } from "./_basic-types";

// https://hl7.org/fhir/R4/elementdefinition.html#ElementDefinition
export type ElementDefinition = BackboneElement & {
    path: string,
    representation?: ("xmlAttr" | "xmlText" | "typeAttr" | "cdaText" | "xhtml")[],
    sliceName?: string,
    sliceIsConstraining?: boolean,
    label?: string,
    code?: Coding[],
    slicing?: Element & {
        discriminator?: (Element & {
            type: "value" | "exists" | "pattern" | "type" | "profile",
            path: string,
        })[],
        description?: string,
        ordered?: boolean,
        rules: "closed" | "open" | "openAtEnd",
    },
    short?: string,
    definition?: markdown,
    comment?: markdown,
    requirements?: markdown,
    alias?: string[],
    min?: unsignedInt,
    max?: string,
    base?: Element & {
        path: string,
        min: unsignedInt,
        max: string,
    },
    contentReference?: uri,
    type?: (Element & {
        code: uri,
        profile?: canonical[],
        targetProfile?: canonical[],
        aggregation?: ("contained" | "referenced" | "bundled")[],
        versioning?: "either" | "independent" | "specific",
    })[],
    [key: `defaultValue${string}`]: any,
    meaningWhenMissing?: markdown,
    orderMeaning?: string,
    [key: `fixed${string}`]: any,
    [key: `pattern${string}`]: any,
    example?: (Element & { 
        label: string,
        [key: `value${string}`]: any 
    })[],
    minValueDate?: date,
    minValueDateTime?: dateTime,
    minValueInstant?: instant,
    minValueTime?: time,
    minValueDecimal?: decimal,
    minValueInteger?: integer,
    minValuePositiveInt?: positiveInt,
    minValueUnsignedInt?: unsignedInt,
    minValueQuantity?: Quantity,
    maxValueDate?: date,
    maxValueDateTime?: dateTime,
    maxValueInstant?: instant,
    maxValueTime?: time,
    maxValueDecimal?: decimal,
    maxValueInteger?: integer,
    maxValuePositiveInt?: positiveInt,
    maxValueUnsignedInt?: unsignedInt,
    maxValueQuantity?: Quantity,
    maxLength?: integer,
    condition?: id[],
    constraint?: (Element & {
        key: id,
        requirements?: string,
        severity: "error" | "warning",
        human: string,
        expression?: string,
        xpath?: string,
        source?: canonical,
    })[],
    mustSupport?: boolean,
    isModifier?: boolean,
    isModifierReason?: string,
    isSummary?: boolean,
    binding?: Element & {
        strength: "required" | "extensible" | "preferred" | "example",
        description?: string,
        valueSet?: canonical,
    },
    mapping?: (Element & {
        identity: id,
        language?: code,
        map: string,
        comment?: string,
    })[],
};